{"ast":null,"code":"function generator() {\n  var options = arguments.length ? arguments[0] : {},\n      count = options.count || 1,\n      units = options.units || 'sentences',\n      sentenceLowerBound = options.sentenceLowerBound || 5,\n      sentenceUpperBound = options.sentenceUpperBound || 15,\n      paragraphLowerBound = options.paragraphLowerBound || 3,\n      paragraphUpperBound = options.paragraphUpperBound || 7,\n      format = options.format || 'plain',\n      words = options.words || require('./dictionary').words,\n      random = options.random || Math.random,\n      suffix = options.suffix;\n\n  if (!suffix) {\n    var isNode = typeof module !== 'undefined' && module.exports;\n    var isReactNative = typeof product !== 'undefined' && product.navigator === 'ReactNative';\n    var isWindows = typeof process !== 'undefined' && 'win32' === process.platform;\n\n    if (!isReactNative && isNode && isWindows) {\n      suffix = '\\r\\n';\n    } else {\n      suffix = '\\n';\n    }\n  }\n\n  units = simplePluralize(units.toLowerCase());\n\n  function randomInteger(min, max) {\n    return Math.floor(random() * (max - min + 1) + min);\n  }\n\n  ;\n\n  function randomWord(words) {\n    return words[randomInteger(0, words.length - 1)];\n  }\n\n  ;\n\n  function randomSentence(words, lowerBound, upperBound) {\n    var sentence = '',\n        bounds = {\n      min: 0,\n      max: randomInteger(lowerBound, upperBound)\n    };\n\n    while (bounds.min < bounds.max) {\n      sentence += ' ' + randomWord(words);\n      bounds.min++;\n    }\n\n    if (sentence.length) {\n      sentence = sentence.slice(1);\n      sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n    }\n\n    return sentence;\n  }\n\n  ;\n\n  function randomParagraph(words, lowerBound, upperBound, sentenceLowerBound, sentenceUpperBound) {\n    var paragraph = '',\n        bounds = {\n      min: 0,\n      max: randomInteger(lowerBound, upperBound)\n    };\n\n    while (bounds.min < bounds.max) {\n      paragraph += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n      bounds.min++;\n    }\n\n    if (paragraph.length) {\n      paragraph = paragraph.slice(2);\n      paragraph += '.';\n    }\n\n    return paragraph;\n  }\n\n  var iter = 0,\n      bounds = {\n    min: 0,\n    max: count\n  },\n      string = '',\n      prefix = '',\n      openingTag,\n      closingTag;\n\n  if (format === 'html') {\n    openingTag = '<p>';\n    closingTag = '</p>';\n  }\n\n  while (bounds.min < bounds.max) {\n    switch (units.toLowerCase()) {\n      case 'words':\n        string += ' ' + randomWord(words);\n        break;\n\n      case 'sentences':\n        string += '. ' + randomSentence(words, sentenceLowerBound, sentenceUpperBound);\n        break;\n\n      case 'paragraphs':\n        var nextString = randomParagraph(words, paragraphLowerBound, paragraphUpperBound, sentenceLowerBound, sentenceUpperBound);\n\n        if (format === 'html') {\n          nextString = openingTag + nextString + closingTag;\n\n          if (bounds.min < bounds.max - 1) {\n            nextString += suffix; // Each paragraph on a new line\n          }\n        } else if (bounds.min < bounds.max - 1) {\n          nextString += suffix + suffix; // Double-up the EOL character to make distinct paragraphs, like carriage return\n        }\n\n        string += nextString;\n        break;\n    }\n\n    bounds.min++;\n  }\n\n  if (string.length) {\n    var pos = 0;\n\n    if (string.indexOf('. ') === 0) {\n      pos = 2;\n    } else if (string.indexOf('.') === 0 || string.indexOf(' ') === 0) {\n      pos = 1;\n    }\n\n    string = string.slice(pos);\n\n    if (units === 'sentences') {\n      string += '.';\n    }\n  }\n\n  return string;\n}\n\n;\n\nfunction simplePluralize(string) {\n  if (string.indexOf('s', string.length - 1) === -1) {\n    return string + 's';\n  }\n\n  return string;\n}\n\nmodule.exports = generator;","map":null,"metadata":{},"sourceType":"script"}